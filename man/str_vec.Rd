% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string_tools.R
\name{str_vec}
\alias{str_vec}
\title{Efficient creation of string vectors with optional interpolation}
\usage{
str_vec(
  ...,
  .delim = c("{", "}"),
  .envir = parent.frame(),
  .split = TRUE,
  .protect.vars = TRUE
)
}
\arguments{
\item{...}{Character vectors that will be vectorized. If commas are present in the
character vector, it will be split with respect to commas and following blanks.
The vectors can contain any interpolation in the form \code{"{var}"} and
any \code{\link[=smagic]{smagic()}} operation can be applied. To change the delimiters for interpolation,
see \code{.delim}. Named arguments are used in priority for variable substitution,
otherwise the value of the variables to be interpolated are fetched in the calling environment
(see argument \code{.envir}).

Note, importantly, that interpolation and comma splitting are performed on "natural" vectors only.
That is: \code{str_vec("x{1:5}")} will lead to a vector of length 5 ("x1" to "x5"), while \code{z = "x{1:5}"}
followed by \code{str_vec(z)} leads to a vector of length 1: \code{"x{1:5}"}. To change this behavior and
obtain equivalent results, use \code{.protect.vars = FALSE}.}

\item{.delim}{Character vector of length 1 or 2. Default is \code{c("{", "}")}. Defines
the opening and the closing delimiters for interpolation.

If of length 1, it must be of the form: 1) the opening delimiter,
2) a single space, 3) the closing delimiter. Ex: \code{".[ ]"} is equivalent to \code{c(".[", "]")}.
The default value is equivalent to \code{"{ }"}.

[ ]: R:\%20
[", "]: R:\%22,\%20\%22}

\item{.envir}{An environment used to evaluate the variables in \code{"{}"}. By default the variables are
evaluated using the environment from where the function is called or using the named
arguments passed to the function.}

\item{.split}{Logical, default is \code{TRUE}. Whether to split the vector with
respect to commas. Ex: by default \code{str_vec("hi, there")} leads to the
vector \code{c("hi", "there")}.}

\item{.protect.vars}{Logical scalar, default is \code{TRUE}. If \code{TRUE}, then only
arguments equal to a "natural" character scalar are comma-split and interpolated,
other arguments are not touched. Ex: \code{str_vec("x{1:5}")} will lead to a vector of
length 5 ("x1" to "x5"), while \code{z = "x{1:5}"} followed by \code{str_vec(z)} leads
to a vector of length 1: \code{"x{1:5}"}. If \code{FALSE}, comma-splitting and interpolation
is performed on all variables.}
}
\description{
Create string vectors in multiple ways: 1) add successive string elements (like in \code{c()}),
or 2) write a character string that will be broken with respect to commas
(\code{"hi, there"} becomes \code{c("hi", "there")}), or 3) interpolate variables in
character strings (\code{"x{1:2}"} becomes \code{c("x1", "x2")}) with full access to
\code{\link[=smagic]{smagic()}} operations, or any combination of the three.
}
\details{
The default of the argument \code{.protect.vars} is \code{FALSE} so as to avoid unwanted
comma-splitting and interpolations. The main use case of this function is
the creation of small string vectors, which can be written directly at
function call.
}
\examples{

# illustrating comma-splitting and interpolation
str_vec("x1, y2, z{4:5}")

# variable protection
x = "x{1:5}"
str_vec(x, "y{1:2}")

# without protection => interpolation takes place
str_vec(x, "y{1:2}", .protect.vars = FALSE)

# removing comma splitting
str_vec("Hi, said Charles.", "Hi, said {girl}.", girl = "Julia", .split = FALSE)

# changing the delimiters for interpolation
pkg = "\\\\usepackage[usenames,dvipsnames]{xcolor}"
str_vec("\\\\usepackage{.[S!graphicx, fourier, standalone]}", 
        pkg, .delim = ".[ ]")



}
\seealso{
A few basic operation: \code{\link[=str_is]{str_is()}}, \code{\link[=str_get]{str_get()}}, \code{\link[=str_clean]{str_clean()}}. Chain basic operations with \code{\link[=str_ops]{str_ops()}}.
Use \code{\link[=str_vec]{str_vec()}} to create simple string vectors.
String interpolation combined with operation chaining: \code{\link[=smagic]{smagic()}}.
}
\author{
Laurent Berge
}
